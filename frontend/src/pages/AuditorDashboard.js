import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';
import api from '../config/api';
import StatCard from '../components/StatCard';
import AssignedVendors from '../components/AssignedVendors';
import DocumentsReview from '../components/DocumentsReview';
import RecentActivities from '../components/RecentActivities';
import ReminderModal from '../components/ReminderModal';

const AuditorDashboard = () => {
  const [documents, setDocuments] = useState([]);
  const [vendors, setVendors] = useState([]);
  const [activities, setActivities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showReminderModal, setShowReminderModal] = useState(false);
  const [selectedVendor, setSelectedVendor] = useState(null);
  const [reminderData, setReminderData] = useState({ subject: '', message: '' });

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const [documentsRes, vendorsRes, activitiesRes] = await Promise.all([
        api.get('/api/documents'),
        api.get('/api/assignments/vendors/'),
        api.get('/api/activities')
      ]);
      

      const documentsData = documentsRes.data.success ? documentsRes.data.documents : documentsRes.data;
      setDocuments(Array.isArray(documentsData) ? documentsData : []);
      setVendors(Array.isArray(vendorsRes.data) ? vendorsRes.data : []);
      setActivities(Array.isArray(activitiesRes.data) ? activitiesRes.data : []);
    } catch (error) {
      toast.error('Failed to fetch data');
      setDocuments([]);
      setVendors([]);
      setActivities([]);
    } finally {
      setLoading(false);
    }
  };

  const handleStatusUpdate = async (documentId, newStatus) => {
    try {
      await api.put(`/api/documents/${documentId}`, {
        status: newStatus
      });
      toast.success('Document status updated');
      fetchData();
    } catch (error) {
      toast.error('Failed to update document status');
    }
  };

  const handleSendReminder = async (e) => {
    e.preventDefault();
    try {
      await api.post('/api/activities/reminder', {
        vendorId: selectedVendor._id,
        subject: reminderData.subject,
        message: reminderData.message
      });
      toast.success('Reminder sent successfully');
      setShowReminderModal(false);
      setReminderData({ subject: '', message: '' });
      fetchData();
    } catch (error) {
      toast.error('Failed to send reminder');
    }
  };

  const generateReport = async () => {
    try {
      const response = await api.get('/api/activities/report');
      const report = response.data;
      
      // Create and download report
      const reportContent = `
        Audit Report
        Generated by: ${report.generatedBy}
        Generated at: ${new Date(report.generatedAt).toLocaleString()}
        
        Total Activities: ${report.totalActivities}
        
        Activities:
        ${report.activities.map(activity => 
          `${new Date(activity.createdAt).toLocaleString()} - ${activity.user.name} - ${activity.description}`
        ).join('\n')}
      `;
      
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `audit-report-${new Date().toISOString().split('T')[0]}.txt`;
      a.click();
      window.URL.revokeObjectURL(url);
      
      toast.success('Report generated successfully');
    } catch (error) {
      toast.error('Failed to generate report');
    }
  };

  if (loading) {
    return <div className="loading">Loading dashboard...</div>;
  }

  const pendingDocuments = Array.isArray(documents) ? documents.filter(doc => doc.status === 'pending') : [];

  const approvedDocuments = Array.isArray(documents) ? documents.filter(doc => doc.status === 'approved') : [];

  return (
    <div>
      <div className="dashboard-header">
        <h1 className="dashboard-title">Auditor Dashboard</h1>
        <button onClick={generateReport} className="btn btn-primary">
          Generate Report
        </button>
      </div>

      {/* Stats Cards */}
      <div className="stats-grid">
        <StatCard title="Assigned Vendors" value={vendors.length} />
        <StatCard title="Total Documents" value={documents.length} />
        <StatCard title="Pending Review" value={pendingDocuments.length} type="warning" />
        <StatCard title="Approved" value={approvedDocuments.length} type="success" />
      </div>

      <AssignedVendors 
        vendors={vendors}
        setSelectedVendor={setSelectedVendor}
        setShowReminderModal={setShowReminderModal}
      />

      <DocumentsReview 
        documents={documents}
        handleStatusUpdate={handleStatusUpdate}
      />

      <RecentActivities activities={activities} />

      <ReminderModal 
        showReminderModal={showReminderModal}
        selectedVendor={selectedVendor}
        reminderData={reminderData}
        setReminderData={setReminderData}
        handleSendReminder={handleSendReminder}
        setShowReminderModal={setShowReminderModal}
      />
    </div>
  );
};

export default AuditorDashboard;